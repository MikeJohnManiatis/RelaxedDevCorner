{"version":3,"sources":["components/AppNavBar.js","components/PostList.js","components/Home.js","components/ViewPost.js","components/CreatePost.js","App.js","serviceWorker.js","index.js"],"names":["AppNavbar","props","state","isOpen","toggle","bind","this","setState","Cookies","get","CheckAuthentication","clientId","process","buttonText","onSuccess","response","fetch","tokenId","method","headers","then","json","responseJSON","cookies","email","set","isAdmin","givenName","window","location","reload","catch","err","console","log","onFailure","cookiePolicy","className","id","IsAdmin","href","color","dark","expand","tag","Link","to","onClick","navbar","ShowCreatePost","GetSignInButton","Component","PostList","handlePageClick","e","selectedPage","selected","offset","perPage","currentPage","receivedData","viewPost","category","slug","posts","isLoading","pageCount","data","length","postData","slice","map","post","index","key","title","author","cdDate","Math","ceil","previousLabel","nextLabel","breakLabel","breakClassName","marginPagesDisplayed","pageRangeDisplayed","onPageChange","containerClassName","subContainerClassName","activeClassName","Home","ViewPost","match","params","cache","redirect","referrerPolicy","fluid","body","CreatePost","Category","Title","Slug","Body","handleChange","createPost","event","target","value","name","Date","postObject","JSON","stringify","alert","type","onChange","App","Route","path","exact","component","Switch","returnAdminRoutes","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.7803f18d.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Collapse, Nav, Navbar, NavbarBrand, NavbarToggler, NavItem, NavLink} from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { GoogleLogin} from 'react-google-login';\r\nimport Cookies from 'universal-cookie';\r\nexport default class AppNavbar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {isOpen: false};\r\n    this.toggle = this.toggle.bind(this);\r\n    \r\n  }\r\n\r\n  toggle() {\r\n    this.setState({\r\n      isOpen: !this.state.isOpen\r\n    });\r\n  }\r\n\r\n  CheckAuthentication()\r\n  {\r\n    const cookies = new Cookies();\r\n    return cookies.get(\"IsAuthenticated\") == \"True\";\r\n  }\r\n\r\n  IsAdmin()\r\n  {\r\n    const cookies = new Cookies();\r\n    return cookies.get(\"IsAdmin\") == \"True\";\r\n  }\r\n\r\n  GetSignInButton() {\r\n    const Success = (response) => {\r\n      return fetch(process.env.REACT_APP_API_URL + 'Account/Authenticate?idTokenString=' + response.tokenId, {\r\n        method: 'GET',\r\n        headers: {\r\n        }\r\n    }).then(response => response.json())\r\n        .then((responseJSON) => {\r\n          if(responseJSON != null)\r\n          {\r\n            var cookies = new Cookies();\r\n            if (responseJSON.email != null)\r\n            {\r\n              cookies.set(\"IsAuthenticated\", \"True\");\r\n              if (responseJSON.isAdmin)\r\n              {\r\n                cookies.set(\"IsAdmin\", \"True\");\r\n              }\r\n              \r\n              responseJSON.givenName != null ? cookies.set(\"givenName\", responseJSON.givenName) : cookies.set(\"givenName\", \"\");\r\n\r\n            }\r\n          }\r\n          window.location.reload(true);\r\n    }).catch(err => console.log(err));\r\n    }\r\n\r\n    const Failure = (response) => {\r\n      new Cookies().set(\"IsAuthenticated\", \"False\");\r\n      // console.log(response);\r\n    }\r\n\r\n    const logout = (response) => {\r\n      new Cookies().set(\"IsAuthenticated\", \"False\");\r\n    //   alert(response);\r\n    }\r\n\r\n    if (!this.CheckAuthentication())\r\n    {\r\n      return <GoogleLogin\r\n        clientId= {process.env.REACT_APP_Prd_GoogleClientId}\r\n        buttonText=\"Login\"\r\n        onSuccess={Success}\r\n        onFailure={Failure}\r\n        cookiePolicy={'single_host_origin'}\r\n        />\r\n\r\n    }\r\n    else if(this.CheckAuthentication() === true)\r\n    {\r\n      var cookies = new Cookies();\r\n      return <> <div className=\"UsernameBox\"> <span id=\"UserNameText\">Welcome, <br / > {cookies.get(\"givenName\")}</span></div> </>\r\n    }\r\n  }\r\n\r\n  ShowCreatePost()\r\n  {\r\n    if (this.CheckAuthentication() && this.IsAdmin())\r\n    {\r\n      return (\r\n        <NavLink href=\"/CreatePost\">Create Blog Post</NavLink>\r\n      )\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n\r\n    return <Navbar color=\"dark\" dark expand=\"md\" id=\"MainNavBar\">\r\n      <NavbarBrand tag={Link} to=\"/\">Home</NavbarBrand>\r\n      <NavbarToggler onClick={this.toggle}/>\r\n      <Collapse isOpen={this.state.isOpen} navbar>\r\n        <Nav className=\"ml-auto\" navbar>\r\n          <NavItem>\r\n          {this.ShowCreatePost()}\r\n          </NavItem>\r\n          <NavItem>\r\n            <NavLink href=\"https://twitter.com/michaelmaniatis\">@mikedev</NavLink>\r\n          </NavItem>\r\n          <NavItem>\r\n            <NavLink href=\"https://github.com/mikejohnmaniatis\">GitHub</NavLink>\r\n          </NavItem>\r\n          <NavItem>\r\n            {this.GetSignInButton()}\r\n          </NavItem>\r\n        </Nav>\r\n      </Collapse>\r\n    </Navbar>;\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport './css/App.css';\r\nimport { Container, Button} from 'reactstrap';\r\nimport ReactPaginate from 'react-paginate';\r\n\r\nclass PostList extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n          posts: [], \r\n          isLoading:true,\r\n          offset: 0,\r\n          perPage: 5,\r\n          currentPage: 0,\r\n          pageCount: null\r\n        }\r\n\r\n    }\r\n\r\n    receivedData()\r\n    {\r\n      fetch(process.env.REACT_APP_API_URL + 'GetPosts', {\r\n        method: 'get',\r\n        headers: {\r\n        },\r\n      })\r\n      .then(response => response.json())\r\n      .then(data => {\r\n            console.log(data.length);\r\n            const slice = data.slice(this.state.offset, this.state.offset + this.state.perPage);\r\n            const postData = slice.map((post,index) => \r\n            \r\n            <div key={index} className=\"PostCard\" onClick={ () => this.viewPost(post.category, post.slug) }>\r\n              <h3 className=\"PostCardText\" id=\"Title\">{post.title}</h3>\r\n              <span className=\"CardFooter\">Written by: {post.author} | {post.cdDate} </span>\r\n              <br />\r\n            </div>\r\n\r\n            )\r\n\r\n            this.setState({\r\n                pageCount: Math.ceil(data.length / this.state.perPage),\r\n                postData,\r\n                isLoading: false\r\n            })\r\n        \r\n          });\r\n    }\r\n\r\n    handlePageClick = (e) => {\r\n      const selectedPage = e.selected;\r\n      const offset = selectedPage * this.state.perPage;\r\n\r\n      this.setState({\r\n          currentPage: selectedPage,\r\n          offset: offset\r\n      }, () => {\r\n          this.receivedData()\r\n      });\r\n\r\n  };\r\n\r\n    componentDidMount() {\r\n        this.setState({isLoading: true});\r\n        this.receivedData()\r\n    }\r\n\r\n\r\n    viewPost = (category, slug) => {\r\n      window.location.href =\"/ViewPost/\" + category + \"/\" + slug + \"/\";\r\n    }\r\n\r\n    //Open particular post..\r\n    render() {\r\n        const {isLoading} = this.state;\r\n\r\n        if (isLoading) {\r\n          return <p>Loading...</p>;\r\n        }\r\n\r\n        return (<>\r\n                {this.state.postData}\r\n                    <ReactPaginate\r\n                          previousLabel={\"prev\"}\r\n                          nextLabel={\"next\"}\r\n                          breakLabel={\"...\"}\r\n                          breakClassName={\"break-me\"}\r\n                          pageCount={this.state.pageCount}\r\n                          marginPagesDisplayed={2}\r\n                          pageRangeDisplayed={5}\r\n                          onPageChange={this.handlePageClick}\r\n                          containerClassName={\"pagination\"}\r\n                          subContainerClassName={\"pages pagination\"}\r\n                          activeClassName={\"active\"}\r\n                          \r\n                      />\r\n              </>\r\n        );\r\n    }\r\n}\r\nexport default PostList;\r\n","import React, { Component } from 'react';\r\nimport './css/App.css';\r\n\r\nimport AppNavbar from './AppNavBar';\r\nimport PostList from './PostList';\r\nimport { Container} from 'reactstrap';\r\n\r\nclass Home extends Component {\r\n  render() {\r\n    return (\r\n      <div className =\"HomeContainer\">\r\n          <div className=\"NavBar\">\r\n            <AppNavbar/>\r\n          </div>\r\n\r\n          <div className=\"PostContainer\">\r\n            <PostList/>\r\n          </div>\r\n        </div>\r\n      \r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;","import React, { Component } from 'react';\r\nimport './css/App.css';\r\nimport AppNavbar from './AppNavBar';\r\nimport { Container} from 'reactstrap';\r\n\r\nexport default class ViewPost extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {post: []}\r\n        \r\n    }\r\n    componentDidMount()\r\n    {\r\n        if (this.props.match.params){\r\n            const slug = this.props.match.params.slug;\r\n            const category = this.props.match.params.category;\r\n            fetch(process.env.REACT_APP_API_URL+ '/GetPost?category=' + category + '&slug=' +slug, {\r\n                method: 'GET',\r\n                cache: 'no-cache', \r\n                // credentials: 'same-origin', \r\n                headers: {\r\n                  'Content-Type': 'application/json'\r\n                },\r\n                redirect: 'follow', \r\n                referrerPolicy: 'no-referrer'\r\n               \r\n              }).then(response => response.json())\r\n              .then(data =>  this.setState({post: data}));\r\n                \r\n        }\r\n\r\n    }\r\n\r\n    render(){\r\n        const {post} = this.state;\r\n        return (<div> \r\n                <AppNavbar/>\r\n                <Container fluid>\r\n                    <div className=\"jumbotron\">\r\n                        <h1>{post.title}</h1>\r\n                        <p>Written by: {post.author}</p>\r\n               \r\n                    </div>  \r\n                    <div className=\"article\">\r\n                        <div className=\"PostBody\">\r\n                            {post.body}\r\n                        </div>\r\n                    </div>\r\n                </Container>\r\n\r\n                </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport AppNavbar from './AppNavBar';\r\nimport './css/App.css';\r\n\r\nexport default class CreatePost extends Component \r\n{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {Category: '', Title: '', Slug: '', Body: ''}\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.createPost = this.createPost.bind(this);\r\n    }\r\n\r\n    handleChange(event)\r\n    {\r\n        const target = event.target;\r\n        const value = target.value;\r\n        const name = target.name;\r\n\r\n        this.setState({\r\n            [name] : value\r\n        });\r\n\r\n    }\r\n\r\n    createPost (event)\r\n    {   \r\n        const category = this.state.Category;\r\n        const title = this.state.Title;\r\n        const slug = this.state.Slug;\r\n        const body = this.state.Body;\r\n        const author = 'Michael J. Maniatis';\r\n        const cdDate =  new Date();\r\n        var postObject = JSON.stringify({category: category, title: title, slug:slug,\r\n            body:body, author:author, cdDate:cdDate})\r\n        fetch(process.env.REACT_APP_API_URL + \"CreatePost\", {\r\n            method: 'post',\r\n            body: postObject,\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            \r\n        }).then(response => response)\r\n        .then(data => window.location.reload(true))\r\n        .catch(err => alert(err));\r\n        \r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <AppNavbar/>\r\n                <div className=\"jumbotron\">\r\n                <h1>Thanks for contributing!</h1>\r\n                </div>\r\n                <div className=\"container\">\r\n                    <div className = \"CreatePostForm\">\r\n\r\n                        <label className=\"CreateFormLabel\">\r\n                            Category: \r\n                        </label>\r\n                        <input className =\"CreateFormInput\"name = \"Category\" type=\"text\" value={this.state.Category} onChange={this.handleChange}></input>\r\n                        <br/>\r\n                        <label className=\"CreateFormLabel\">\r\n                            Title: \r\n                        </label>\r\n\r\n                        <input className =\"CreateFormInput\" name = \"Title\" type=\"text\" value={this.state.Title} onChange={this.handleChange}></input>\r\n\r\n                        <br/>\r\n                        <label className=\"CreateFormLabel\">\r\n                            Slug: \r\n                        </label>\r\n\r\n                        <input className =\"CreateFormInput\" name = \"Slug\" type=\"text\" value={this.state.Slug} onChange={this.handleChange}></input>\r\n                        <br/>\r\n                        <label className=\"CreateFormLabel\">\r\n                            Body: \r\n                        </label>\r\n\r\n                        <textarea className =\"CreateFormInput\" id=\"CreateFormBody\"\r\n                        name = \"Body\" type=\"textarea\" value={this.state.Body} onChange={this.handleChange}></textarea>\r\n                        \r\n                        <button onClick={this.createPost}>\r\n                            Submit\r\n                        </button>\r\n                    \r\n                </div>\r\n            </div>\r\n        </div>\r\n        \r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport Home from './components/Home';\r\nimport ViewPost from './components/ViewPost';\r\nimport CreatePost from './components/CreatePost';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport Cookies from 'universal-cookie';\r\n\r\nclass App extends Component {\r\n  constructor(){\r\n    super();\r\n    this.state = {};\r\n  }\r\n  returnAdminRoutes()\r\n  {\r\n    const cookies = new Cookies();\r\n    if (cookies.get(\"IsAdmin\") == \"True\" && cookies.get(\"IsAuthenticated\") == \"True\")\r\n        return <Route path='/CreatePost' exact={true} component={CreatePost} /> \r\n  }\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <Switch>\r\n          <Route path='/' exact={true} component={Home}/>\r\n          <Route path='/ViewPost/:category/:slug' exact={true} component={ViewPost}/>\r\n          {this.returnAdminRoutes()}\r\n        </Switch>\r\n      </Router>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}